layerId = label_id  # Set a unique ID for the label
)
# Reset selected cities
selected_cities$city1 <- NULL
selected_cities$city2 <- NULL
}
})
}
shinyApp(ui, server)
# Make a shiny app ---------------------------------------------------
# Shiny app to display interactive map
ui <- fluidPage(
tags$style(
"
/* Ensure no margin or padding around the body */
body, html {
margin: 0;
padding: 0;
height: 100%;
}
/* Make the map take up the full viewport height */
#map {
height: 100vh; /* 100% of the viewport height */
width: 100%;
}
"
),
leafletOutput("map")
)
server <- function(input, output, session) {
# Reactive values to store selected cities
selected_cities <- reactiveValues(city1 = NULL, city2 = NULL)
route_data <- reactiveVal(NULL)
# Render leaflet map
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(
data = norway_cities %>% st_transform('+proj=longlat +datum=WGS84'),
popup = ~ as.character(city),
layerId = ~ as.character(city)
)
})
# Handle city clicks
observeEvent(input$map_marker_click, {
clicked_city <- input$map_marker_click$id
if (is.null(selected_cities$city1)) {
selected_cities$city1 <- clicked_city
} else if (is.null(selected_cities$city2)) {
selected_cities$city2 <- clicked_city
# Fetch coordinates of the selected cities
city1_coords <- norway_cities %>% filter(city == selected_cities$city1) %>% st_coordinates()
city2_coords <- norway_cities %>% filter(city == selected_cities$city2) %>% st_coordinates()
# Calculate route, distance, and duration
route    <- route %>% filter(orig == selected_cities$city1, dest == selected_cities$city2)
distance <- round(route$distance,2)
duration <- round(route$duration,2)
leafletProxy("map") %>%
clearShapes()
# Update map with polyline
leafletProxy("map") %>%
clearShapes() %>%
addPolylines(
data = route %>% st_transform('+proj=longlat +datum=WGS84')
)
# Remove previous label if it exists
if (!is.null(selected_cities$control_id)) {
leafletProxy("map") %>%
removeControl(selected_cities$control_id)
}
# Add custom label with a white background at the midpoint of the route
label_id <- paste0("route_label_", Sys.time())  # Create a unique ID for each label
selected_cities$control_id <- label_id  # Store the label ID for future removal
leafletProxy("map") %>%
addControl(
html = paste(
"<div style='background-color:white; padding:10px; border-radius:5px; border:1px solid #ccc;'>",
"From ", selected_cities$city1, " to ", selected_cities$city2, "<br>",
"Time: ", round(duration, 2), " hours <br>",
"Length: ", round(distance, 2), " km",
"</div>"
),
position = "topright",
layerId = label_id  # Set a unique ID for the label
)
# Reset selected cities
selected_cities$city1 <- NULL
selected_cities$city2 <- NULL
}
})
}
shinyApp(ui, server)
write_sf(paste0(path,"/output/route.shp"))
write_sf(route,paste0(path,"/output/route.shp"))
route = route %>% st_as_sf()
write_sf(route,paste0(path,"/output/route.shp"))
st_write(route,paste0(path,"/output/route.shp"))
#---------------------------------------------------------------------
#
# Open OSMR and setup.
# MM
#
#---------------------------------------------------------------------
path = "/Users/mmoglia/Dropbox/research/phd/osrm_norway"
# Load required packages ---------------------------------------------
pacman::p_load(osrm,dplyr,osmdata,ggplot2,sf,leaflet,shiny)
# Set-up origin and destination --------------------------------------
norway_shp = read_sf(paste0(path,"/raw/no_100km.shp"))
norway_cities <- data.frame(
city = c("Oslo", "Bergen", "Stavanger", "Trondheim", "Drammen", "Fredrikstad", "Kristiansand", "Tromsø", "Sandnes", "Ålesund"),
lat  = c(59.9139, 60.3920, 58.9690, 63.4305, 59.7444, 59.2115, 58.1467, 69.6496, 58.8524, 62.4722),
lon  = c(10.7522, 5.3245, 5.7331, 10.3942, 10.2045, 10.9391, 7.9956, 18.9560, 5.7331, 6.1495)
) %>%
st_as_sf(coords = c("lon","lat"), crs = 4326) %>%
st_transform(crs = 4258)
ggplot() +
geom_sf(data = norway_shp, fill = "white") +
geom_sf(data = norway_cities, colour = "indianred") +
theme_bw()
# Compute a matrix of travel times -----------------------------------
travel_time = osrmTable(loc = norway_cities)
# Extract the paths --------------------------------------------------
route = data.frame()
for(x in 1:length(norway_cities$city)){
for(y in 1:length(norway_cities$city)){
path = osrmRoute(src = norway_cities[x,], dst = norway_cities[y,])
path = path %>%
mutate(orig = norway_cities$city[x],
dest = norway_cities$city[y])
route = rbind(route,path)
}
}
route = route %>% st_as_sf()
st_write(route,paste0(path,"/output/route.shp"))
st_write(st_convex_hull(route-,paste0(path,"/output/route.shp"))
st_write(st_convex_hull(route),paste0(path,"/output/route.shp"))
st_write(route %>% st_as_sf() ,paste0(path,"/output/route.shp"))
class(route)
route
st_write(route,dsn = paste0(path,"/output/route.shp"))
paste0(path,"/output/route.shp")
#---------------------------------------------------------------------
#
# Open OSMR and setup.
# MM
#
#---------------------------------------------------------------------
project = "/Users/mmoglia/Dropbox/research/phd/osrm_norway"
# Load required packages ---------------------------------------------
pacman::p_load(osrm,dplyr,osmdata,ggplot2,sf,leaflet,shiny)
# Set-up origin and destination --------------------------------------
norway_shp = read_sf(paste0(project,"/raw/no_100km.shp"))
norway_cities <- data.frame(
city = c("Oslo", "Bergen", "Stavanger", "Trondheim", "Drammen", "Fredrikstad", "Kristiansand", "Tromsø", "Sandnes", "Ålesund"),
lat  = c(59.9139, 60.3920, 58.9690, 63.4305, 59.7444, 59.2115, 58.1467, 69.6496, 58.8524, 62.4722),
lon  = c(10.7522, 5.3245, 5.7331, 10.3942, 10.2045, 10.9391, 7.9956, 18.9560, 5.7331, 6.1495)
) %>%
st_as_sf(coords = c("lon","lat"), crs = 4326) %>%
st_transform(crs = 4258)
ggplot() +
geom_sf(data = norway_shp, fill = "white") +
geom_sf(data = norway_cities, colour = "indianred") +
theme_bw()
# Compute a matrix of travel times -----------------------------------
travel_time = osrmTable(loc = norway_cities)
# Extract the paths --------------------------------------------------
route = data.frame()
for(x in 1:length(norway_cities$city)){
for(y in 1:length(norway_cities$city)){
path = osrmRoute(src = norway_cities[x,], dst = norway_cities[y,])
path = path %>%
mutate(orig = norway_cities$city[x],
dest = norway_cities$city[y])
route = rbind(route,path)
}
}
route = route %>% st_as_sf()
st_write(route,dsn = paste0(project,"/output/route.shp"))
ggplot() +
geom_sf(data = norway_shp, fill = "white") +
geom_sf(data = norway_cities, colour = "indianred") +
geom_sf(data = route, colour = "blue")
route = sf_read(paste0(project,"/output/route.shp"))
route = read_sf(paste0(project,"/output/route.shp"))
# Shiny app to display interactive map
ui = fluidPage(
leafletOutput("map")
)
server =function(input, output, session) {
# Reactive values to store selected cities
selected_cities = reactiveValues(city1 = NULL, city2 = NULL)
route_data = reactiveVal(NULL)
# Render leaflet map
output$map =renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(
data = norway_cities %>% st_transform('+proj=longlat +datum=WGS84'),
popup = ~ as.character(city),
layerId = ~ as.character(city)
)
})
# Handle city clicks
observeEvent(input$map_marker_click, {
clicked_city =input$map_marker_click$id
if (is.null(selected_cities$city1)) {
selected_cities$city1 =clicked_city
} else if (is.null(selected_cities$city2)) {
selected_cities$city2 =clicked_city
# Fetch coordinates of the selected cities
city1_coords = norway_cities %>% filter(city == selected_cities$city1) %>% st_coordinates()
city2_coords = norway_cities %>% filter(city == selected_cities$city2) %>% st_coordinates()
# Calculate route, distance, and duration
route    = route %>% filter(orig == selected_cities$city1, dest == selected_cities$city2)
distance = round(route$distance,2)
duration = round(route$duration,2)
leafletProxy("map") %>%
clearShapes()
# Update map with polyline
leafletProxy("map") %>%
clearShapes() %>%
addPolylines(
data = route %>% st_transform('+proj=longlat +datum=WGS84')
)
# Remove previous label if it exists
if (!is.null(selected_cities$control_id)) {
leafletProxy("map") %>%
removeControl(selected_cities$control_id)
}
# Add custom label with a white background at the midpoint of the route
label_id =paste0("route_label_", Sys.time())  # Create a unique ID for each label
selected_cities$control_id =label_id  # Store the label ID for future removal
leafletProxy("map") %>%
addControl(
html = paste(
"<div style='background-color:white; padding:10px; border-radius:5px; border:1px solid #ccc;'>",
"From ", selected_cities$city1, " to ", selected_cities$city2, "<br>",
"Time: ", round(duration, 2), " hours <br>",
"Length: ", round(distance, 2), " km",
"</div>"
),
position = "topright",
layerId = label_id  # Set a unique ID for the label
)
# Reset selected cities
selected_cities$city1 = NULL
selected_cities$city2 = NULL
}
})
}
shinyApp(ui, server)
pacman::p_load(osrm,dplyr,osmdata,ggplot2,sf,leaflet,shiny,rsconnect)
rsconnect::deployApp(paste0(project))
route = read_sf(paste0(project,"/output/route.shp"))
# Make a shiny app ---------------------------------------------------
# Shiny app to display interactive map
ui = fluidPage(
leafletOutput("map")
)
server =function(input, output, session) {
# Reactive values to store selected cities
selected_cities = reactiveValues(city1 = NULL, city2 = NULL)
route_data = reactiveVal(NULL)
# Render leaflet map
output$map =renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(
data = norway_cities %>% st_transform('+proj=longlat +datum=WGS84'),
popup = ~ as.character(city),
layerId = ~ as.character(city)
)
})
# Handle city clicks
observeEvent(input$map_marker_click, {
clicked_city =input$map_marker_click$id
if (is.null(selected_cities$city1)) {
selected_cities$city1 =clicked_city
} else if (is.null(selected_cities$city2)) {
selected_cities$city2 =clicked_city
# Fetch coordinates of the selected cities
city1_coords = norway_cities %>% filter(city == selected_cities$city1) %>% st_coordinates()
city2_coords = norway_cities %>% filter(city == selected_cities$city2) %>% st_coordinates()
# Calculate route, distance, and duration
route    = route %>% filter(orig == selected_cities$city1, dest == selected_cities$city2)
distance = round(route$distance,2)
duration = round(route$duration,2)
leafletProxy("map") %>%
clearShapes()
# Update map with polyline
leafletProxy("map") %>%
clearShapes() %>%
addPolylines(
data = route %>% st_transform('+proj=longlat +datum=WGS84')
)
# Remove previous label if it exists
if (!is.null(selected_cities$control_id)) {
leafletProxy("map") %>%
removeControl(selected_cities$control_id)
}
# Add custom label with a white background at the midpoint of the route
label_id =paste0("route_label_", Sys.time())  # Create a unique ID for each label
selected_cities$control_id =label_id  # Store the label ID for future removal
leafletProxy("map") %>%
addControl(
html = paste(
"<div style='background-color:white; padding:10px; border-radius:5px; border:1px solid #ccc;'>",
"From ", selected_cities$city1, " to ", selected_cities$city2, "<br>",
"Time: ", round(duration, 2), " hours <br>",
"Length: ", round(distance, 2), " km",
"</div>"
),
position = "topright",
layerId = label_id  # Set a unique ID for the label
)
# Reset selected cities
selected_cities$city1 = NULL
selected_cities$city2 = NULL
}
})
}
shinyApp(ui, server)
rsconnect::deployApp(paste0(project))
pacman::p_load(osrm,dplyr,osmdata,ggplot2,sf,leaflet,shiny,rmarkdown)
rmarkdown::render(paste0(project,"app_roads.Rmd"))
route = read_sf(paste0(project,"/output/route.shp"))
# Make a shiny app ---------------------------------------------------
# Shiny app to display interactive map
ui = fluidPage(
leafletOutput("map")
)
server =function(input, output, session) {
# Reactive values to store selected cities
selected_cities = reactiveValues(city1 = NULL, city2 = NULL)
route_data = reactiveVal(NULL)
# Render leaflet map
output$map =renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(
data = norway_cities %>% st_transform('+proj=longlat +datum=WGS84'),
popup = ~ as.character(city),
layerId = ~ as.character(city)
)
})
# Handle city clicks
observeEvent(input$map_marker_click, {
clicked_city =input$map_marker_click$id
if (is.null(selected_cities$city1)) {
selected_cities$city1 =clicked_city
} else if (is.null(selected_cities$city2)) {
selected_cities$city2 =clicked_city
# Fetch coordinates of the selected cities
city1_coords = norway_cities %>% filter(city == selected_cities$city1) %>% st_coordinates()
city2_coords = norway_cities %>% filter(city == selected_cities$city2) %>% st_coordinates()
# Calculate route, distance, and duration
route    = route %>% filter(orig == selected_cities$city1, dest == selected_cities$city2)
distance = round(route$distance,2)
duration = round(route$duration,2)
leafletProxy("map") %>%
clearShapes()
# Update map with polyline
leafletProxy("map") %>%
clearShapes() %>%
addPolylines(
data = route %>% st_transform('+proj=longlat +datum=WGS84')
)
# Remove previous label if it exists
if (!is.null(selected_cities$control_id)) {
leafletProxy("map") %>%
removeControl(selected_cities$control_id)
}
# Add custom label with a white background at the midpoint of the route
label_id =paste0("route_label_", Sys.time())  # Create a unique ID for each label
selected_cities$control_id =label_id  # Store the label ID for future removal
leafletProxy("map") %>%
addControl(
html = paste(
"<div style='background-color:white; padding:10px; border-radius:5px; border:1px solid #ccc;'>",
"From ", selected_cities$city1, " to ", selected_cities$city2, "<br>",
"Time: ", round(duration, 2), " hours <br>",
"Length: ", round(distance, 2), " km",
"</div>"
),
position = "topright",
layerId = label_id  # Set a unique ID for the label
)
# Reset selected cities
selected_cities$city1 = NULL
selected_cities$city2 = NULL
}
})
}
shinyApp(ui, server)
rmarkdown::render(paste0(project,"/app_roads.Rmd"))
rmarkdown::render(paste0(project,"/1_shiny.Rmd"))
pacman::p_load(osrm,dplyr,osmdata,ggplot2,sf,leaflet,shiny,htmlwidgets)
shinyApp(ui, server)
saveWidget(paste0(project,"/map.html"))
app = shinyApp(ui, server)
saveWidget(app, paste0(project,"/map.html"))
st_write(norway_cities,dsn = paste0(project,"/output/norway_cities.shp"))
rmarkdown::render(paste0(project,"/2_map.Rmd"))
setwd(project)
rmarkdown::render("2_map.Rmd")
rmarkdown::render(paste0(project,"/2_map.Rmd"))
rmarkdown::run(paste0(project,"/2_map.Rmd"))
rmarkdown::run(paste0(project,"/2_map.Rmd"))
rmarkdown::render(paste0(project,"/2_map.Rmd"))
pacman::p_load(osrm,dplyr,osmdata,ggplot2,sf,leaflet,shiny,rsconnect)
rsconnect::setAccountInfo(name='dz683z-mateo', token='78D48D02F03E1272C309A4C1EB0C61BF', secret='S9fCWMSzhxr1OYffOSoz9TYiE8dMqVb/uj8Uvpb5')
pacman::p_load(osrm,dplyr,osmdata,ggplot2,sf,leaflet,shiny,htmlwidgets)
project = "/Users/mmoglia/Dropbox/research/phd/osrm_norway"
route = read_sf(paste0(project,"/output/route.shp"))
norway_cities = read_sf(paste0(project,"/output/norway_cities.shp"))
# Make a shiny app ---------------------------------------------------
# Shiny app to display interactive map
ui = fluidPage(
leafletOutput("map")
)
server = function(input, output, session) {
# Reactive values to store selected cities
selected_cities = reactiveValues(city1 = NULL, city2 = NULL)
route_data = reactiveVal(NULL)
# Render leaflet map
output$map =renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(
data = norway_cities %>% st_transform('+proj=longlat +datum=WGS84'),
popup = ~ as.character(city),
layerId = ~ as.character(city)
)
})
# Handle city clicks
observeEvent(input$map_marker_click, {
clicked_city =input$map_marker_click$id
if (is.null(selected_cities$city1)) {
selected_cities$city1 =clicked_city
} else if (is.null(selected_cities$city2)) {
selected_cities$city2 =clicked_city
# Fetch coordinates of the selected cities
city1_coords = norway_cities %>% filter(city == selected_cities$city1) %>% st_coordinates()
city2_coords = norway_cities %>% filter(city == selected_cities$city2) %>% st_coordinates()
# Calculate route, distance, and duration
route    = route %>% filter(orig == selected_cities$city1, dest == selected_cities$city2)
distance = round(route$distance,2)
duration = round(route$duration,2)/60
leafletProxy("map") %>%
clearShapes()
# Update map with polyline
leafletProxy("map") %>%
clearShapes() %>%
addPolylines(
data = route %>% st_transform('+proj=longlat +datum=WGS84')
)
# Remove previous label if it exists
if (!is.null(selected_cities$control_id)) {
leafletProxy("map") %>%
removeControl(selected_cities$control_id)
}
# Add custom label with a white background at the midpoint of the route
label_id =paste0("route_label_", Sys.time())  # Create a unique ID for each label
selected_cities$control_id =label_id  # Store the label ID for future removal
leafletProxy("map") %>%
addControl(
html = paste(
"<div style='background-color:white; padding:10px; border-radius:5px; border:1px solid #ccc;'>",
"From ", selected_cities$city1, " to ", selected_cities$city2, "<br>",
"Time: ", round(duration, 2), " hours <br>",
"Length: ", round(distance, 2), " km",
"</div>"
),
position = "topright",
layerId = label_id  # Set a unique ID for the label
)
# Reset selected cities
selected_cities$city1 = NULL
selected_cities$city2 = NULL
}
})
}
shinyApp(ui,server)
runApp()
setwd(project)
runApp
runApp()
runApp()
deployApp()
runApp()
setwd(project)
runApp()
setwd(project)
runApp()
deployApp()
read_sf(paste0(project,"/output/route.shp"))
setwd(project)
deployApp()
setwd(project)
deployApp()
?reactiveValues
?st_transform
setwd(project)
deployApp()
norway_cities = read_sf("/ouptut/norway_cities.shp")
norway_cities = read_sf("/output/norway_cities.shp")
getwd()
norway_cities = read_sf("~/output/norway_cities.shp")
norway_cities = read_sf(~/output/norway_cities.shp)
norway_cities = read_sf("output/norway_cities.shp")
deployApp()
deployApp()
